#!/usr/bin/python3
import json
import os
import sys
import subprocess
from pathlib import Path
import libzfs


def check_if_locked_dataset(path: str):
    with libzfs.ZFS() as zfs:
        try:
            ds = zfs.get_dataset_by_path(path)
            return ds.encrypted and not ds.key_loaded
        except libzfs.ZFSException as exc:
            raise Exception(f"Unable to determine dataset encryption: {path}. Error: {exc}")


def migrate(values):
    # minio user / group ID
    uid = gid = 473
    # values['extraAppVolumeMounts']['']
    # values['appVolumeMounts']['']
    # complete_config['ixVolumes'].append({
    #         'hostPath': os.path.join(context['release']['path'], 'volumes/ix_volumes', ds_name),
    #     })
    # TODO: add breakpoint and see the `values` structure right here.

    path = '/mnt/evo/ix-applications/'  # example (DO NOT RUN)

    # taken from _common_perm_path_validate
    is_cluster = path.startswith('CLUSTER:')
    if is_cluster:
        raise Exception(f"Path should not start with 'CLUSTER:' {path}")

    # taken from _common_perm_path_validate
    p = Path(path)
    if not p.is_absolute():
        raise Exception(f'Must be an absolute path: {path}')

    # taken from _common_perm_path_validate
    if p.is_file():
        raise Exception(f'Recursive operations on a file are invalid: {path}')

    # taken from _common_perm_path_validate
    if os.path.realpath(path).startswith("/root/.ssh"):
        raise Exception(
            "Changes to permissions under /root/.ssh are not permitted: {path}"
        )

    # taken from _common_perm_path_validate
    if not os.path.realpath(path).startswith('/mnt/'):
        raise Exception(
            "Changes to permissions on paths that are not beneath the directory /mnt are not permitted: {path}"
        )

    # taken from _common_perm_path_validate
    elif len(p.resolve().parents) == 2:
        raise Exception(f'The specified path is a ZFS pool mountpoint: {path}')

    # make sure that dataset is not locked
    if check_if_locked_dataset(path):
        raise Exception(f"Dataset is locked at path: {path}.")

    # make sure all the minio's data directory children are on same device.
    device_id = os.stat(path).st_dev
    for root, __, files in os.walk(path):
        for file in files:
            if os.stat(os.path.join(root, file)).st_dev != device_id:
                raise Exception(
                    (f"All the children of MinIO data directory should be on "
                     f"same device as root: {os.path.join(root, file)}")
                )

    acltool = subprocess.run([
        '/usr/bin/nfs4xdr_winacl',
        '-a', 'chown',
        '-O', str(uid), '-G', str(gid),
        '-r',
        '-c', path,
        '-p', path], check=False, capture_output=True
    )
    if acltool.returncode != 0:
        raise Exception(f"acltool [chown] on path {path} failed with error: [{acltool.stderr.decode().strip()}]")

    return values


if __name__ == '__main__':
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], 'r') as f:
            print(json.dumps(migrate(json.loads(f.read()))))
